# adaptive-android-v2.yaml
# ----------------------------------------------------------------------
# 変更理由（Changelog / Rationale）
# - v1 運用中に、Detail / MainContent / SubContent が NavGraph 未登録であることが判明。
# - これらは単なる Composable として存在していたため、実際の画面遷移ができない。
# - v2 では NavGraph への destinations 追加、エントリ関数の分離、配線、戻る、deep link
#   までを段階的に組み込むマイルストーンを新設した。
# - 既存 v1 は互換維持（modules-and-deps / top-and-tabs / list-second-level / subcontent-third-level）。
# ----------------------------------------------------------------------

workflow: "Adaptive layouts playground (Android v2)"
principles:
  - "Each task must compile (:app:assembleDebug or module-local build)."
  - "One commit per task."
  - "Keep adaptive usage behind :core:ui wrappers."
  - "Respect depends_on strictly."
  - "Changes must stay within module_scope."

# 既存の v1 マイルストーンは省略（そのまま流用）。以下は v2 での追加分。
milestones:
  - name: "nav-graph-second-third-level"
    description: "Detail / MainContent / SubContent を NavGraph に登録し、一覧から辿れるようにする"

    tasks:
      - id: "register-destinations-detail-main-sub"
        goal: ":feature:navigation の NavGraph に detail/{id}, main/{id}, sub/{id} を追加する"
        module_scope: [":feature:navigation", ":core:route"]
        # v1 の navigation 基盤と list module がある前提
        depends_on: ["navigation-feature", "listdetail-impl"]
        actions:
          - "NavGraph 定義（:feature:navigation）に以下の destination を追加:"
          - "  - composable(route = \"detail/{id}\", arguments = [navArgument(\"id\") { type = NavType.StringType }]) {"
          - "      val id = it.arguments?.getString(\"id\")!!"
          - "      DetailRoute(id)"
          - "    }"
          - "  - composable(route = \"main/{id}\", arguments = [navArgument(\"id\") { type = NavType.StringType }]) {"
          - "      val id = it.arguments?.getString(\"id\")!!"
          - "      MainContentRoute(id)"
          - "    }"
          - "  - composable(route = \"sub/{id}\", arguments = [navArgument(\"id\") { type = NavType.StringType }]) {"
          - "      val id = it.arguments?.getString(\"id\")!!"
          - "      SubContentRoute(id)"
          - "    }"
          - ":core:route の AppRoute 拡張（routeName）と整合する route 文字列を使用すること。"
          - "Run ./gradlew :feature:navigation:build"
        verify:
          - ":feature:navigation がビルド成功すること"
        commit: "feat(nav): add destinations for detail/main/sub to NavGraph"
        notes: "null 安全性のため requireNotNull などで id を検証しても良い"

      - id: "entry-composables-in-feature-list"
        goal: ":feature:list に DetailRoute / MainContentRoute / SubContentRoute のエントリ関数を追加する"
        module_scope: [":feature:list"]
        depends_on: ["register-destinations-detail-main-sub"]
        actions:
          - ":feature:list に以下の Composable エントリ関数を追加（既存 Screen を呼び出す）:"
          - "  fun DetailRoute(id: String) { DetailScreen(id = id) }"
          - "  fun MainContentRoute(id: String) { MainContentScreen(id = id) }"
          - "  fun SubContentRoute(id: String) { SubContentScreen(parentId = id) }"
          - "SubContentScreen.kt が無ければ新規作成（プレースホルダで可）。"
          - "Run ./gradlew :feature:list:build"
        verify:
          - ":feature:list がビルド成功すること"
          - "SubContentScreen が存在すること"
        commit: "feat(list): add route entry composables for detail/main/sub"
        notes: "Main/Detail のどちらで Sub を開くかは後続タスクで配線"

      - id: "Create module.Detail, MainContent, SubContent"
        goal: "DetailScreen, MainContentScreen, SubContentScreen を featureモジュールに分割する"
        module_scope: [":feature:list", ":feature:detail", ":feature:maincontent", ":feature:subcontent", "navigation", "core:ui", "core:route"]
        actions:
          - "DetailScreen, MainContentScreen, SubContentScreen をそれぞれ feature モジュールに移動する"
          - "必要に応じて core:ui のコンポーネントを利用するように修正する"
          - "各モジュールの build.gradle.kts に必要な依存関係を追加する"
          - "Run ./gradlew :feature:list:build :feature:detail:build :feature:maincontent:build :feature:subcontent:build"
        verify: "それぞれのモジュールでassembleDebugが成功すること"

      - id: "migrate-type-safe-navigation-compose"
        goal: "NavigationComposeを型安全に使う"
        module_scope: ["app", "core:route"]
        actions:
          - "kotlin-serializationの依存をプロジェクトに導入"
          - "routeをシリアライザブルなデータクラスに置き換え"
          - "既存のnavigation compose の画面遷移の仕組みを,type-safe な形に変更"
        verify: "appがassembleDebugに成功すること"